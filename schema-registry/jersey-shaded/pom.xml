<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>schema-registry</artifactId>
        <groupId>com.hortonworks.registries</groupId>
        <version>0.9.1</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>jersey-shaded</artifactId>
    <version>${jersey.version}-${project.parent.version}</version>
    <packaging>jar</packaging>

    <properties>
        <shading.prefix>com.hortonworks.registries.shaded</shading.prefix>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>ch.qos.logback</groupId>
                    <artifactId>logback-classic</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
            <version>${jersey.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>${jackson.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <id>jersey-shaded</id>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <createDependencyReducedPom>true</createDependencyReducedPom>
                            <dependencyReducedPomLocation>${project.basedir}/target/dependency-reduced-pom.xml</dependencyReducedPomLocation>
                            <!-- modify the src JARs too, it helps the user of the jar -->
                            <shadeSourcesContent>true</shadeSourcesContent>
                            <!-- attach relocated src JARs - the relocated src code is not 100% good due to a bug in the Maven plugin, but it's better than nothing -->
                            <createSourcesJar>true</createSourcesJar>
                            <!-- Jersey uses OSGI so we need to relocate the configs in META-INF/services too -->
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"/>
                            </transformers>
                            <relocations>
                                <!-- jaxws-rs is used by Jersey -->
                                <relocation>
                                    <pattern>javax.ws.rs</pattern>
                                    <shadedPattern>${shading.prefix}.javax.ws.rs</shadedPattern>
                                    <includes>
                                        <include>javax.ws.rs.**</include>
                                    </includes>
                                </relocation>
                                <!-- Jersey core -->
                                <relocation>
                                    <pattern>org.glassfish</pattern>
                                    <shadedPattern>${shading.prefix}.org.glassfish</shadedPattern>
                                    <includes>
                                        <include>org.glassfish.jersey.**</include>
                                        <include>org.glassfish.hk2.**</include>
                                    </includes>
                                </relocation>
                                <!-- dependency injection framework -->
                                <relocation>
                                    <pattern>org.jvnet.hk2</pattern>
                                    <shadedPattern>${shading.prefix}.org.jvnet.hk2</shadedPattern>
                                    <includes>
                                        <include>org.jvnet.hk2.**</include>
                                    </includes>
                                </relocation>
                                <!-- Jackson is used by Jersey -->
                                <relocation>
                                    <pattern>com.fasterxml.jackson</pattern>
                                    <shadedPattern>${shading.prefix}.com.fasterxml.jackson</shadedPattern>
                                    <includes>
                                        <include>com.fasterxml.jackson.**</include>
                                    </includes>
                                </relocation>
                            </relocations>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Since the binaries are going to be relocated, we need to attach the relocated source code too. Without the source code we could only debug with a decompiler. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>${maven-source-plugin.version}</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar-no-fork</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <classifier>sources</classifier>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- Used to resolve variables in the 'version' tag -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>1.2.1</version>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>package</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                        <configuration>
                            <!-- The least invasive mode that effectively only resolves variables -->
                            <flattenMode>resolveCiFriendliesOnly</flattenMode>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
            <!-- The shade plugin transformer has a bug, so we need to clean up the workspace before every build. -->
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>auto-clean</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
        </plugins>

    </build>

</project>
